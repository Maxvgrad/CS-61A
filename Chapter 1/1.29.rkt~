#lang Scheme

(define (cube x) (* x x x))

(define (integral f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b)
     dx))

(define (integral-simpson f a b n)

  (define h (/ (+ a b) n))
  (define (add-dx a) (+ a (* h 2)))
  
  (exact->inexact (*
    (+ (f a)
       (* 4 (sum f (+ a h) add-dx (- b h)))
       (* 2 (sum f (+ a (* h 2)) add-dx (- b (* 2 h))))
       (f b)
    )
    (/ h 3))
  )
)


(define (sum term a next b)  
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

