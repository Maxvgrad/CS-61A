#lang Scheme




(define (search-for-primes from to)

  (define (timed-prime-test n)
    (newline)
    (display n)
    (start-prime-test n (runtime)))

  (define (start-prime-test n start-time)
    (if (prime? n)
      (report-prime (- (runtime) start-time)) (display "")))
  
  
  (define (search-for-primes-internal from to)
    (cond ((>= from to) 'done)
          ((even? from) (search-for-primes-internal (+ from 1) to))
          (else (
                 (timed-prime-test from)
                 (search-for-primes-internal (+ from 2) to)
                )
          )
    )
  )
  
  (search-for-primes-internal from to)
)







(define (prime? n)
  (= n (smallest-divisor n)))

(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))


(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (runtime) (* 100 (current-milliseconds)))

(define (square n)
  (* n n))


; 1009 *** 0
; 1013 *** 0
; 1019 *** 0

; 10007 *** 0
; 10009 *** 0
; 10037 *** 0

; 1000003 *** 0
; 1000033 *** 0
; 1000037 *** 0
; 1000039 *** 100

; 10000019 *** 0
;10000079 *** 0
;10000103 *** 0
;10000121 *** 0
;10000139 *** 100


;1000000007 *** 200
;1000000009 *** 200
;1000000021 *** 200
;1000000033 *** 300