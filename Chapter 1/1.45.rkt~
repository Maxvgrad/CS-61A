#lang Scheme


(define (root x n)
  (define (average a b)
    (newline)
    (print 'average:)
    (print a)
    (print ':)
    (print b)

    (/ (+ a b) 2))

  (define (f y) (/ x (expt y (- n 1))))
  
  (fixed-point (repeated (lambda (y) (average y (f y)))  (round  (/ n 2)))
               1.0)
  )

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (let ((tolerance 0.00001))
    (< (abs (- v1 v2)) tolerance)))
  (define (try guess)
    (newline)
    (print 'guess:)
    (print guess)
    (let ((next (f guess)))
      (
       if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (compose f g) (lambda (x) (f (g x))))

(define (repeated f n)
    (if (= n 1) f
       (compose f (repeated f (- n 1)))
       )
)